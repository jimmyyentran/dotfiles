*lldb.txt* A plugin that enables debugging from your favourite editor

                   ____    ____                 _
                  / / /___/ / /_    ____ _   __(_)___ ___
                 / / / __  / __ \  / __ \ | / / / __ `__ \
                / / / /_/ / /_/ / / / / / |/ / / / / / / /
               /_/_/\__,_/_.___(_)_/ /_/|___/_/_/ /_/ /_/

                  LLDB Debugger Ingegration For Neovim

==============================================================================

CONTENTS                                                *lldb-contents*

    1. Introduction .................... |lldb-intro|
    2. Features ........................ |lldb-features|
    3. Getting Started ................. |lldb-start|
    4. Commands ........................ |lldb-commands|
    5. Mappings ........................ |lldb-mappings|
    6. Session manipulation ............ |lldb-session|
    7. License ......................... |lldb-license|
    8. General guidelines .............. |lldb-guidelines|
    9. Issues and Bugs ................. |lldb-bugs|
   10. Contributing .................... |lldb-contributing|


Original Author:    Daniel Malea <daniel.malea@intel.com>
Forked by:          Tobias Pflug <tobias.pflug@gmail.com>
Maintainer:         John C F <john.ch.fr@gmail.com>
License:            Same terms as Vim itself (see |license|)

==============================================================================

INTRODUCTION                                            *lldb-intro*

The plugin provides an interface to the lldb debugger allowing for convenient
debugging sessions inside your favorite editor. See |lldb-features| for a
complete set of features.

This plugin started out as a fork of

https://github.com/gillian/vim-lldb

which was forked from

http://llvm.org/svn/llvm-project/lldb/trunk/utils/vim-lldb/

A lot of refactoring, performance improvements, and many new features were
added which would have been very hard (if not impossible) to implement as a
standard Vim plugin.

This plugin takes advantage of Neovim's job API to spawn a separate process
and communicates with the Neovim process using RPC calls.

==============================================================================

FEATURES                                                *lldb-features*

* Buffers showing debugger state: backtrace, breakpoints etc.
* Event-based, non-blocking UI
* Breakpoints persistence across exits
* Modal approach: define modes and replay commands during mode-switches
* Tab-completion for LLDB commands

==============================================================================

GETTING STARTED                                         *lldb-start*

To quickly get started, compile (with debugging symbols) the source and
open a source file belonging to the program in Neovim, and execute
>
    :LLsession new
<
This will prompt you to choose a location for your new "session" file, and
further prompts you to input path of the target executable.

The default session file defines 2 modes: "code", and "debug". You are now
in the "code" mode, which is an empty mode. Now switch to "debug" mode:
>
    :LLmode debug
<
Now, a new tab with windows showing various information about the state of
debugger will be created. And you will prompted whether you would like to
launch the process right away.

With cursor on some line in the source file, press |<Plug>LLBreakSwitch| to
set a breakpoint at that line. Alternatively, you can execute:
>
    :LL breakpoint set --name function_name
<
Notice that there is tab-completion. If you chose not to launch the process
earlier, you can do so by one of the following commands:
>
    :LL process launch
    :LL process launch -- args
    :LL process launch -i infile -o outfile -- args
<
Once the program reaches the specified breakpoint you will be able to
inspect state and step through the program ... bla bla bla.

Don't forget that, you can interrupt an unresponsive process using:
>
    :LL process interrupt
<
Alternatively, you can kill it using:
>
    :LL process kill
<
==============================================================================

CUSTOMIZING                                             *lldb-customizing*

 *g:lldb#session#file*
                      Default session file name: 'lldb-nvim.json'

 *g:lldb#session#mode_setup*
                      Default layout setup function: 'lldb#layout#setup'
                      This will be called every time a new mode is set up,
                      with mode name as the first argument.

 *g:lldb#session#mode_teardown*
                      Default layout teardown function: 'lldb#layout#teardown'
                      Similar to mode_setup above.

==============================================================================

COMMANDS                                                *lldb-commands*

                                                        *:LL*
:LL {cmd}               Execute an arbitrary LLDB command {cmd} in the LLDB
                        command interpreter.

                                                        *:LLmode*
:LLmode {mode}          Switch to {mode}, by tearing down the current mode,
                        and executing the setup actions of {mode}

                                                        *:LLrefresh*
:LLrefresh              Updates all debugger signs and buffer contents.

                                                        *:LLsession*
:LLsession {cmd} ...    Execute a session related command.
                        See |lldb-session| for more details.

                                                        *:LLstdin*
:LLstdin [{arg}]        If no {arg} is specified, or if {arg} is `--raw`, an
                        |input()| prompt will show up. If `--raw` was not
                        specified, the input line will be suffixed with a
                        line-break "\n" and passed to the process' stdin.
                        {arg} can also be one of
                            `BS` (backspace)
                            `CR` (carriage return)
                            `EOT` (end of transmission)
                            `LF` (line-feed)
                            `NUL` (null character)
                            `SPACE`
                        which passes the corresponding character to stdin.
                        Also see |digraph-table|.

==============================================================================

MAPPINGS                                                *lldb-mappings*

<Plug>LLBreakSwitch                             *<Plug>LLBreakSwitch*
                        Insert breakpoint at cursor location.

I recommend setting the following maps:
>
    nmap <M-b> <Plug>LLBreakSwitch
    vmap <F2> <Plug>LLStdInSelected
    nnoremap <F4> :LLstdin<CR>
    nnoremap <S-F4> :LLstdin --raw<CR>
    nnoremap <F5> :LLmode debug<CR>
    nnoremap <S-F5> :LLmode code<CR>
    nnoremap <F8> :LL continue<CR>
    nnoremap <S-F8> :LL process interrupt<CR>
    nnoremap <F9> :LL print <C-R>=expand('<cword>')<CR>
    vnoremap <F9> :<C-U>LL print <C-R>=lldb#util#get_selection()<CR>
<
==============================================================================

SESSION MANIPULATION                                    *lldb-session*

LLsession subcommands                           *:LLsession-subcommands*

  new           Create a new session state based on a default template.
  load {file}   Load session state described in {file}.
                If {file} is not given, try to load |g:lldb#session#file|
  show          Show the session file with latest changes.
  reload        Reload the current session state, by first tearing down the
                current mode and setting up the first defined mode.
  bp-save       Save all the currently set breakpoints to the session state.
  bp-set        Set breakpoints defined in the session state.

The session file                                *lldb-session-file*

See the json files in `examples` directory.

==============================================================================

GENERAL GUIDELINES                                      *lldb-guidelines*

Below are some random points that might make your debugging life easier:

* LLDB completions will be relative to the parent directory of session file

* Do not create multiple targets -- currently not supported

* Try these out (in debug mode): `:LL help process` `:LL command history`

* While in logs buffer, try pressing `i`, `d` or `q`

* LLDB completions will be relative to the parent directory of session file.
  This is because regardless of the pwd of Vim, the plugin process will always
  be in the parent directory of the currently loaded session file.

* Target should be deleted when exiting debugging mode, so that it can be
  re-added (after a compilation, may be) when re-entering debug mode.
  - For compiling, try using `:NeomakeSh` from neomake plugin by benekastah.

* If you have an external script, may I suggest moving all breakpoint
  management commands to the session file.

* Have a key-binding for `process interrupt` command; it will come in handy.

==============================================================================

LICENSE                                                 *lldb-license*

Same as Vim itself. See |license|.

==============================================================================

FEEDBACK AND ISSUES                                     *lldb-bugs*

Please give me your feedbacks about the ease-of-use and other aspects at:

https://gitter.im/critiqjo/lldb.nvim

If you run into a bug, use the Github issue tracker to report it:

https://github.com/critiqjo/lldb.nvim/issues

It would be nice if you could set the following environment variable:
>
    export NVIM_PYTHON_LOG_FILE=/tmp/nvlog
<
and post the log along with the bug report.

==============================================================================

CONTRIBUTING                                            *lldb-contributing*

Fantastic! Check out the project issues page for ideas, and there are a lot of
FIXMEs and TODOs springled across the codebase. If you have a feature idea,
please report it as an issue, before starting to work on it.

Another great way to contribute would be to make this documentation more
comprehensive, and easy to understand. Also, you could post a screencast, or
an asciinema recording, or an interesting session file example in the gitter
page; which might be included in the repo.

 vim:tw=78:sw=4:ft=help:norl:
