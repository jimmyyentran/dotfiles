"Jimmy Tran's vimrc
"Vim-Plug{{{1
call plug#begin('~/.vim/bundle')
Plug 'VundleVim/Vundle.vim'
Plug 'scrooloose/nerdtree'
Plug 'kien/ctrlp.vim'
Plug 'Valloric/YouCompleteMe'
Plug 'rdnetto/YCM-Generator', {'branch': 'stable'}
Plug 'Raimondi/delimitMate'
Plug 'scrooloose/nerdcommenter'
Plug 'rking/ag.vim'
Plug 'jistr/vim-nerdtree-tabs'
Plug 'xolox/vim-misc'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'easymotion/vim-easymotion'
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
Plug 'benekastah/neomake'
Plug 'vim-scripts/SearchComplete'
Plug 'tpope/vim-surround'
Plug 'critiqjo/lldb.nvim'
Plug 'dpzmick/neovim-hackernews'
Plug 'tpope/vim-fugitive'
Plug 'hdima/python-syntax'
Plug 'christoomey/vim-tmux-navigator'
Plug 'altercation/vim-colors-solarized'
" Plug 'klen/python-mode'
call plug#end()

" }}}
"Settings{{{1
let mapleader = "\<Space>"
" set nocompatible
" filetype off
syntax on
filetype on
filetype plugin indent on
filetype plugin on
set background=dark

" sometimes solarized doesn't exist
try
    colorscheme solarized
catch /^Vim\%((\a\+)\)\=:E185/
    colorscheme desert
endtry
" let g:solarized_termcolors=256
" let g:solarized_visibility="high"
" let g:solarized_contrast="high"
" colorscheme desert
"Settings for Konsole
" highlight Pmenu ctermfg=5 ctermbg=163
" set t_Co=256
"

" this breaks on nvim
if !has('nvim')
    set encoding=utf-8
endif
" set term=xterm-256color
set backspace=2   " Backspace deletes like most programs in insert mode
set nobackup
set nowritebackup
set noswapfile    " http://robots.thoughtbot.com/post/18739402579/global-gitignore#comment-458413287
set history=50
set ruler         " show the cursor position all the time
set showcmd       " display incomplete commands
set hlsearch      " highlight search terms
set incsearch     " do incremental searching
set laststatus=2  " Always display the status line
set autowrite     " Automatically :write before running commands
set autoindent    " always set audoindenting on
" set cursorline
set smartindent   "does the right thing mostly in programs
" Softtabs, 4 spaces
set tabstop=4
set shiftwidth=4
set shiftround
set expandtab
" Display extra whitespace
set list listchars=tab:»·,trail:·,nbsp:·
" Make it obvious where 80 characters is
set textwidth=80
set colorcolumn=+1
" Numbers
set number
set numberwidth=4
" Open new split panes to right and bottom, which feels more natural
set splitbelow
set splitright
" Set spellfile to location that is guaranteed to exist, can be symlinked to
" Dropbox or kept in Git and managed outside of thoughtbot/dotfiles using rcm.
set spellfile=$HOME/.vim-spell-en.utf-8.add
" Autocomplete with dictionary words when spell check is on
set complete+=kspell
" Always use vertical diffs
set diffopt+=vertical

" let use defaults
" Allow .bashrc and .bash_aliases to run in :! commands
" set shell=/bin/bash\ -i

" Toggle paste off and show visual
nnoremap <F2> :set invpaste paste?<CR>
set pastetoggle=<F2>
set showmode
"Folding
set foldmethod=marker
" set fdc=2
" set fdl=1
"Folding Colors
highlight Folded cterm=bold ctermfg=darkgrey ctermbg=none
highlight FoldColumn ctermfg=darkgrey ctermbg=black
"set scrolloff settings to keep cursor in the middle
" set so=999
"make time out time faster for esc(this is for vim-airline)
set ttimeoutlen=50
"make vim transparent
hi Normal ctermbg=none

" source /usr/local/lib/python2.7/site-packages/powerline/bindings/vim/plugin/powerline.vim
" }}}
"Local config{{{1
if filereadable($HOME . "/.vimrc.local")
  source ~/.vimrc.local
endif

if filereadable(expand("~/.vimrc.bundles"))
  source ~/.vimrc.bundles
endif

" Load matchit.vim, but only if the user hasn't installed a newer version.
if !exists('g:loaded_matchit') && findfile('plugin/matchit.vim', &rtp) ==# ''
  runtime! macros/matchit.vim
endif

" Exclude Javascript files in :Rtags via rails.vim due to warnings when parsing
let g:Tlist_Ctags_Cmd="ctags --exclude='*.js'"

" Treat <li> and <p> tags like the block tags they are
let g:html_indent_tags = 'li\|p'
augroup vimrcEx
  autocmd!
  au!
  " When editing a file, always jump to the last known cursor position.
  " Don't do it for commit messages, when the position is invalid, or when
  " inside an event handler (happens when dropping a file on gvim).
  autocmd BufReadPost *
    \ if &ft != 'gitcommit' && line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif

  " Set syntax highlighting for specific file types
  autocmd BufRead,BufNewFile Appraisals set filetype=ruby
  autocmd BufRead,BufNewFile *.md set filetype=markdown
  " set highlighting for java files
  " autocmd BufRead *.java colorscheme monokai

  " Enable spellchecking for Markdown
  autocmd FileType markdown setlocal spell

  " Automatically wrap at 80 characters for Markdown
  autocmd BufRead,BufNewFile *.md setlocal textwidth=80

  " Automatically wrap at 72 characters and spell check git commit messages
  autocmd FileType gitcommit setlocal textwidth=72
  autocmd FileType gitcommit setlocal spell

  " Allow stylesheets to autocomplete hyphenated words
  autocmd FileType css,scss,sass setlocal iskeyword+=-

  "cursor highlights the current variable in document
  " autocmd CursorMoved * exe printf('match Underlined /\V\<%s\>/', escape(expand('<cword>'), '/\'))

  "always help vertically
  autocmd FileType help wincmd L

  "update vimrc whenever save
  au BufWritePost .vimrc,_vimrc,vimrc,.gvimrc,_gvimrc,gvimrc so $MYVIMRC
  if has('gui_running')
      so $MYGVIMRC
  endif
augroup END

" Cross platform autocmd watches changes in vimrc
" augroup myvimrc
  " au!
  " au BufWritePost .vimrc,_vimrc,vimrc,.gvimrc,_gvimrc,gvimrc so $MYVIMRC
  " if has('gui_running')
      " so $MYGVIMRC
  " endif
" augroup END

" Recognize gradle as groovy file
au BufNewFile,BufRead *.gradle setf groovy
" }}}
" NeoVim Configs {{{1
if has('nvim')
    tnoremap <Esc> <c-\><c-n>
    noremap te :vs <bar> term<cr>
endif
" }}}
"Plugins"{{{1
" Pathogen plugin {{{2
" execute pathogen#infect()
" }}}
" Eclim Plugin {{{2
let g:EclimCompletionMethod = 'omnifunc'
" }}}
" CtrlP plugin {{{2
"Map CtrlP to Java directory
" noremap <C-P> <Esc>:CtrlP /home/jt/Java/<cr>
"set no max file limit"
let g:ctrlp_max_files = 0
" let g:ctrlp_max_files = 50000
"search from current directory
let g:ctrlp_working_path_mode = 'ra'
"some ignores
set wildignore+=*/tmp/*,*.so,*.zip,*/vendor/*,*/\.git/*,*.swp,*.class
set wildignore+=*.png,*.jpg,*.gif
" }}}
" Delimate Plugin {{{2
" au FileType java let delimitMate_expand_cr = 1
" au FileType java let delimitMate_expand_space = 1
let delimitMate_expand_cr = 1
let delimitMate_expand_space = 1

" }}}
" NERDcommenter Plugin {{{2
let NERDCreateDefaultMappings = 0           "Don't use any default mappings
let NERDcommenterWholeLinesInVMode = 1      "Only comment whole lines
let NERDRemoveAltComs = 1                   "Alternative comments can be removed
let NERDRemoveExtraSpaces = 1               "Remove beginning spaces
let NERDSpaceDelims = 1                     "Add space at comment beggining
" }}}
" NERDTree-Tabs {{{2
" let g:nerdtree_tabs_open_on_console_startup=1   
let g:NERDTreeMapJumpFirstChild='\t'            "Make random setting
let g:NERDTreeMapJumpLastChild='\tt'            "Make random setting
let NERDTreeShowBookmarks=1
" }}}
"YouCompleteMe Plugin {{{2
" I decided not to enable white list bc I like YCM for generic file directory
" autofill
" let g:ycm_filetype_whitelist = {'java': 1}
let g:ycm_global_ycm_extra_conf = '~/.ycm_extra_conf.py'
" show auto complete
let g:ycm_min_num_of_chars_for_completion = 1
" show auto complete immediately after symbol
let g:ycm_aut_trigger = 0
" set syntax off
let g:ycm_show_diagnostics_ui = 0
" let g:ycm_autoclose_preview_window_after_completion=1
let g:ycm_goto_buffer_command = 'horizontal-split'
" }}}
" Syntaxtic Plugin (Uninstalled) {{{2
" configure syntastic syntax checking to check on open as well as save
let g:syntastic_check_on_open=1
let g:syntastic_html_tidy_ignore_errors=[" proprietary attribute \"ng-"]
let g:syntastic_eruby_ruby_quiet_messages =
    \ {"regex": "possibly useless use of a variable in void context"}
" }}}
" Silver Searcher / AG Plugin {{{2
" Use The Silver Searcher https://github.com/ggreer/the_silver_searcher
if executable('ag')
  " Use Ag over Grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor --hidden -g ""'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0
endif
" }}}
" Airline Plugin {{{2
let g:airline_theme='luna'
let g:airline_powerline_fonts = 1
" This extension uses 'fake' tabs for buffers, which I dislike
" let g:airline#extensions#tabline#enabled = 1
" }}}
" Easytags Plugin {{{2
" set tags=./.tags;,~/.vim/tags
" set cpoptions+=d
" let g:easytags_file = '~/.vim/tags'
" let g:eastytags_dynamic_files = 2
" let g:easytags_async = 1
" let g:easytags_by_filetype = 1
" let g:easytags_events = ['BufReadPost', 'BufWritePost']
" let g:easytags_include_members = 1
let g:easytags_auto_highlight = 0
let g:easytags_auto_update = 0
" }}}
" Vim-EasyMotion Plugin {{{2
let g:EasyMotion_do_mapping = 0 "disable default
" }}}
" UltiSnips Plugin {{{2
let g:UltiSnipsExpandTrigger="<c-j>"
let g:UltiSnipsJumpForwardTrigger="<c-j>"
let g:UltiSnipsJumpBackwardTrigger="<c-k>"
let g:UltiSnipsEditSplit="vertical"
" }}}
" NeoMake Plugin {{{2
autocmd! BufWritePost * Neomake
" open after two inputs
" let g:neomake_open_list = 2
" }}}
" Python-Syntax Plugin {{{2
let python_highlight_all = 1
" }}}
" Python-mode{{{2
let g:pymode_rope_completion = 0
" }}}
" 
"Mappings{{{1
" Index ctags from any project, including those outside Rails"
map <Leader>ct :!ctags -R .<CR>

" easy open and close folds
nnoremap z za
vnoremap z za

" Switch between the last two files
" nnoremap <leader><leader> <c-^>

" Arrow keys to change window size
nnoremap <Left> :vertical resize -3<cr>
nnoremap <Right> :vertical resize +3<cr>
nnoremap <Up> :resize -3<cr>
nnoremap <Down> :resize +3<cr>

" Run commands that require an interactive shell
nnoremap <Leader>r :RunInInteractiveShell<space>

" Quicker window movement
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l

" tab movement
nnoremap J :tabprevious<cr>
nnoremap K :tabnext<cr>
nnoremap <silent> g0 :tabfirst<cr>
nnoremap <silent> g$ :tablast<cr>

"double tap without entering insert mode
" nnoremap oo o<Esc>
" nnoremap OO O<Esc>
" inoremap OO <Esc>O
nnoremap <CR> o

"Ctrl-s to save current document
nnoremap <silent> <C-S> :update<CR>
vnoremap <C-S> <C-C>:update<CR>
inoremap <C-S> <C-O>:update<CR>

"search check and replace with changed value:
vnoremap <silent> s //e<C-r>=&selection=='exclusive'?'+1':''<CR><CR>
    \:<C-u>call histdel('search',-1)<Bar>let @/=histget('search',-1)<CR>gv
omap s :normal vs<CR>

"if forget about enabaling sudo
cmap w!! w !sudo tee > /dev/null %

"go the end of line quicker than pressing $
noremap gs $

" Tab completion
" will insert tab at beginning of line,
" will use completion if not at beginning
set wildmode=list:longest,list:full
function! InsertTabWrapper()
    let col = col('.') - 1
    if !col || getline('.')[col - 1] !~ '\k'
        return "\<tab>"
    else
        return "\<c-p>"
    endif
endfunction
inoremap <Tab> <c-r>=InsertTabWrapper()<cr>
inoremap <S-Tab> <c-n>

" Map CTRL-/ to to toggle
map <C-_> <plug>NERDCommenterToggle
" NERDTreeTab only of one instance
map <leader>n <plug>NERDTreeTabsToggle<CR>

" map Ctrl-<Space> in insert mode to go to the end parenthesis
" noremap <C-Space> <Esc>%%a

"go to end and beginning of line
noremap H ^
noremap L g_
vnoremap L g_

" go to last place of edit
noremap gI `.

"easier command
noremap ; :
noremap : ;
vnoremap ; :
vnoremap : ;

"run
noremap <leader>cp :!make<cr>
noremap <leader>ct :!make ct<cr>

" format
nnoremap <leader>f mzgg=G`z

"EasyMotion
nmap s <Plug>(easymotion-s)
let g:EasyMotion_smartcase = 1
map <leader>j <Plug>(easymotion-j)
map <leader>k <Plug>(easymotion-k)

nnoremap <leader>gr :YcmCompleter GoToReferences<CR>
nnoremap <leader>gd :YcmCompleter GetDoc<CR>
nnoremap <leader>gt :YcmCompleter GoTo<CR>

" inoremap <C-d> <esc>lxi




" }}}
"Command Alias{{{1
cnoreabbrev vr tabedit ~/.vimrc
" }}}
